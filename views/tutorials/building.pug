extends ../layout_columns

block header
    include ../headers/generic

block inner_content
    div#content.col-8
        h1.text-center Tutorials - Building and installing

        p You can choose to build the project from source (which requires some knowledge like git, cmake and using shell commands) or get a build from a ZIP file.
        br
        br

        section#setup
            h2 Setup
            div.inner-section.
                You can setup an environment variable named #[code ARKSCRIPT_PATH], with the path to the installation directory of ArkScript, so that the standard library can be located without using #[code --lib &lt;path&gt;]. #[em This step is optional].
                The environment variable should direct to a folder with the folder #[code lib/] inside. Multiple path can be provided if your installation separates the modules and the standard library,
                by separating the different paths with a single #[code ;].

        section.from-a-release
            h2 Installing from a release
            div.inner-section
                h3 Windows
                div.
                    Download the #[code windows-msvc-{version}.zip] from the #[a.btn-link(href="https://github.com/ArkScript-lang/Ark/releases/latest") releases], and unpack it wherever you want, as long as you remember where (or add the location to
                    an environment variable as specified in the setup section, to avoid using #[code --lib &lt;path&gt;]). To use the command #[code ark] from everywhere, you will need to
                    #[a.btn-link(href="https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/ee537574(v=office.14)") add it to your PATH] environment variable.
                div.
                    A (maybe easier) alternative is to download #[code windows-installer.exe], an InnoSetup installer for ArkScript. It will install it as well as the standard library (modules included) in your #[code C:/Program Files] folder, and create the appropriate #[code ARKSCRIPT_PATH] environment variable.

                h3 Linux
                div.
                    Download the #[code linux-{compiler}-{version}.zip] from the #[a.btn-link(href="https://github.com/ArkScript-lang/Ark/releases/latest") releases]. You can put the binaries and the lib anywhere you want, as long as you add it to your
                    path to execute ArkScript without giving the complete path (in your #[code .bashrc] for example). You can also create an environment variable as stated in the setup above.

        section#from-docker
            h2 Installing through Docker
            div.inner-section.
                Just launch #[code docker pull arkscript/stable:latest] and you're good to go! To run it, use #[code docker run -it arkscript/stable:latest ... arkscript executable options here].

        section#from-source
            h2 Installing from source
            div.inner-section
                p Clone the repository and go in the newly created repository, then init and update all the git submodules, as follows:
                pre: code.rainbowjs(data-language="shell")
                    | > git clone https://github.com/ArkScript-lang/Ark.git
                    | > cd Ark
                    | > git submodule update --init --recursive
                p If you want a specific revision or tag, you can do this right before initializing and updating the git submodules:
                pre: code.rainbowjs(data-language="shell")
                    | # for a specific revision
                    | > git checkout &lt;commit&gt;
                    | # for a specific tag
                    | > git checkout tags/&lt;tag&gt;
                p Different CMake switches are available to customize the build:
                ul
                    li #[code -DARK_BUILD_EXE] to generate an executable, defaults to Off, building a shared library
                    li #[code -DARK_ENABLE_SYSTEM] to enable `sys:exec` (execute shell commands without restrictions), defaults to On
                    li #[code -DARK_PROFILER_MIPS] to enable the MIPS counting, defaults to Off
                    li #[code -DARK_BUILD_MODULES] to build the modules, defaults to Off
                    li #[code -DARK_NO_STDLIB] to avoid the installation of the ArkScript standard library
                    li #[code -DARK_SANITIZERS] to enable ASAN and UBSAN

                h3 Windows
                p Requirements:
                ul
                    li Windows 10 x64
                    li Visual Studio 17 2022
                    li cmake >= 3.11
                p Commands:
                pre: code.rainbowjs(data-language="shell")
                    | PS> cmake . -Bbuild -DARK_BUILD_EXE=On -G "Visual Studio 17 Win64"
                    | PS> cmake --build build --config Release
                    | PS> cmake --install build --config Release  # might need administrator rights

                h3 Linux
                p Requirements:
                ul
                    li g++ 14
                    li 64 bits computer
                    li cmake >= 3.11
                p Commands:
                pre: code.rainbowjs(data-language="shell")
                    | ~/ark$ cmake . -Bbuild -DARK_BUILD_EXE=On
                    | ~/ark$ cmake --build build --config Release
                    | ~/ark$ sudo cmake --install build --config Release  # needs administrator rights to install under /usr/bin

                h3 MacOS
                p Requirements:
                ul
                    li g++ 14 or clang 16
                    li cmake >= 3.11
                p.
                    On MacOS versions prior to 10.15, #[code libc++] lacks #[code filesystem] in the standard library.
                    #[br]
                    #[br]
                    You will need to :
                ul
                    li Install a newer compiler using #[a.btn-link(href="https://docs.brew.sh/") Homebrew]: #[code brew install gcc && brew link gcc]
                    li Pass compiler path to #[code cmake] in the build step: #[code -DCMAKE_CXX_COMPILER=/usr/local/bin/g++-14]
                p Commands:
                pre: code.rainbowjs(data-language="shell")
                    | ~/ark$ cmake . -Bbuild -DARK_BUILD_EXE=On -DCMAKE_CXX_COMPILER=/usr/local/bin/g++-14
                    | ~/ark$ cmake --build build --config Release
                    | ~/ark$ cmake --install build --config Release  # might need administrator rights
                
                h3 Running the tests
                p To check that everything works, it is important to run the tests for the projects, and we have a multitude of them:
                ul
                    li #[code tests/arkscript]: tests written in ArkScript itself, testing the builtins, operators and keywords (language unit tests)
                    li #[code tests/benchmarks]: benchmarks for the parser and VM with a few scripts to help identifying regressions
                    li #[code tests/errors]: every subfolder is a category of errors we are trying to detect, with #[code a.ark] and #[code a.expected] making a pair of #[em a snippet that should produce an error] and #[em the expected error]
                    li #[code tests/fuzzing]: a collection of scripts (in #[code tests/fuzzing/docker/]) and ArkScript source files under the different #[code corpus] / #[code corpus-cmin] / #[code corpus-cmin-tmin] directories (only the #[code corpus] directory is managed by us, the two others are generated automatically through scripts and AFL++). Fuzzers can be run automatically using the #[code start-afl-docker.sh] script, that starts a docker image, compile ArkScript and run the fuzzers inside tmux sessions. An #[code output/] folder is created at the root of the project with the fuzzers output
                    li #[code tests/unittests]: C++ unit tests for the project using #[a(href="https://github.com/boost-ext/ut") boost/ut], testing different utilities of the project

append scripts
    script(src="/assets/js/languages/shell.js")
