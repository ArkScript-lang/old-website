extends ../layout_columns

block header
    include ../headers/generic

block inner_content
    div#content.col-8
        h1.text-center Understanding the project architecture

        section#global-architecture
            h2 Global architecture
            div.inner-section
                p The #[code src/] folder is divided in two subfolders:
                ul
                    li #[code arkreactor/], the compiler and the runtime
                    li #[code arkscript/], the CLI and the REPL

        section#builtins
            h2 Builtins
            div.inner-section
                p.
                    All the builtin functions (and constants) are located in #[code include/Ark/Builtins]. Those can be used with
                    the bytecode instructions #[code BUILTIN id]. Adding one will need to reference it in #[code include/Ark/Builtins/Builtins.hpp]
                    and in #[code src/arkreactor/Builtins/Builtins.cpp], and then implementing it accordingly under
                    #[code src/arkreactor/Builtins/file.cpp].
                p For more details on how to implement a module see #[a(href="/tutorials/builtins.html") the tutorial].

        section#compiler
            h2 Compiler
            div.inner-section
                p AST optimizer and Compiler are located under #[code include/Ark/Compiler/]. This includes the Parser, AST generation (using Nodes).
                ul
                    li the Welder calls the Parser on a given piece of code
                        ul: li the Parser returns an AST
                    li the ImportSolver is called to resolve any #[code import] left
                        ul
                            li the Parser returns an AST for each file
                            li the AST are aggregated into one
                    li the Welder calls the Macro Processor on the ImportSolver final's AST
                    li the Welder calls the AST optimizer on the Macro Processor's AST
                    li the Compiler generates bytecode, which can be used as is by the virtual machine, or be saved to a file
                p For more details on how it works, see #[a(href="/implementation/compiler.html") the implementation details].

        section#repl
            h2 REPL (read-eval-print-loop)
            div.inner-section
                p.
                    Is located under #[code include/CLI/REPL/]. Basically it's an abstraction level over #[code replxx] (external library for
                    completion and coloration in the shell) and our virtual machine to run user inputs.

        section#virtual-machine
            h2 Virtual Machine
            div.inner-section
                p It lies under #[code include/Ark/VM/] and all the folders under it.
                ul
                    li it handles the Closures which capture whole Scopes through #[code shared_ptr]. Closures are functions with a saved scope, so they can retain information over multiple calls
                    li the Plugin loader is a generic DLL / SO / DYNLIB loader, used by the virtual machine to load ArkScript modules (#[code .arkm] files)
                    li the Scope is how we store our mapping #[code variable id => value], heavily optimized for our needs
                    li the State is:
                        ul
                            li reading bytecode
                            li decoding it
                            li filling multiple tables with it (symbol table, value table, code pages), which are then used by the virtual machine. It allows us to load a single ArkScript bytecode file and use it in multiple virtual machines.
                            li the State retains tables which are #[strong never altered] by the virtual machines
                            li it can also compile ArkScript code and files on the go, and run them right away
                    li the UserType is how we store C++ types unknown to our virtual machine, to use them in ArkScript code
                    li the Value is a very big proxy class to a #[code variant] to store our types (std::string, double, Closure, UserType and more), thus #[strong it must stay small] because it's the primitive type of the virtual machine and the language
                        ul
                            li it handles constness and type through a tag, alongside the value
                            li it provides proxy functions to the underlying #[code variant]
                    li the virtual machine handles:
                        ul
                            li the stack, a single #[code array<Value, 8192>] (the stack size is a constexpr value, thus it can be changed at compile time only)
                            li a reference to the State, to read the tables and code segments
                            li a #[code void*] user_data, retrievable by modules and C++ user functions
                            li the scopes, and their destruction
                            li the instructions, executed in #[code safeRun] which is enclosed in a try/catch to display tracebacks when errors occur
                            li external function calls through its private #[code call] method (to call modules' functions and builtins)
                            li value resolving, useful for modules when a function receives an ArkScript function, through the public method #[code resolve]
                p For more details, see #[a(href="/implementation/vm.html") the implementation details].
                p If you feel that this section is lacking information, please #[a(href="https://github.com/ArkScript-lang/website/issues/new") open an issue].
