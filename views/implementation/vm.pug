extends ../layout_columns

block header
    include ../headers/generic

block inner_content
    div#content.col-8
        h1.text-center Virtual Machine implementation details

        section#constructing
            h2 Constructing a VM
            div.inner-section
                p.
                    This is done by calling the constructor of the VM, passing in a reference to an #[code Ark::State]. It won't be modified,
                    it was made this way to be able to share a single state between multiple independent virtual machines.

        section#running
            h2 Running the VM (and consequently running ArkScript bytecode)
            div.inner-section
                h3 Initializing the VM
                p.
                    The first step before running is to initialize the virtual machine state, this is done each time you call #[code VM::run]
                    to reset its state (stack pointer, stack frame count, shared libs, locals, scopes) and reload the bound functions.
                hr
                h3 Running code while taking care of exceptions
                p.
                    This is the next function called by #[code VM::run]: #[code VM::safeRun]. As its name suggests, it runs bytecode in a
                    safe manner, taking care of the potential exceptions. This is by far the longest method (914 lines at the time writing).
                    It will go through every instruction, running them sequentially, and if an exception is thrown, it will be caught, the
                    exit code of the VM will be set to 1, and a backtrace will be displayed.
                p.
                    Additionally, computed gotos are used here as an optimization, on compilers that support it (Clang and GCC). On other
                    compilers, a normal loop with a switch case is used.
                hr
                h3 Backtrace generation
                p.
                    This is done by #[code VM::backtrace] when an exception was thrown while the VM was running. It will display at most the
                    last 7 elements in the call stack, with the function name (if any) and the arguments with their value.
