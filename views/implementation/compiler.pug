extends ../layout_columns

block header
    include ../headers/generic

block inner_content
    div#content.col-8
        h1.text-center ArkScript's compiler implementation details
        p The compiler is divided in multiple parts, interacting with other in sequence:
        ul
            li the parser, generating the AST from char predicates
            li the import solver, calling the parser as many times as needed to get all the files AST's and piece them together
            li the macro processor, applying macros in the AST
            li the name resolver, resolving packages
            li the optimizer, removing unused symbols from the AST
            li the compiler, generating IR from the AST
            li the IR optimizer, enhancing the IR
            li the IR compiler, generating bytecode from IR
        p.
            There exists another compiler, the json compiler, converting a given code to JSON by iterating through the AST.
            It follows the same process as the compiler to generate the AST.

        section#parser
            h2 Parser
            div.inner-section
                p It is generating the abstract syntax tree (AST) using character predicates in a "parser combinator" fashion.
                
        section#import-solver
            h2 Import solver
            div.inner-section
                p.
                    Using the main script's AST, it retrieves the imports and resolves them relatively to the main script path.
                    Say you have three files, #[code a.ark], #[code foo/b.ark] and #[code foo/bar/c.ark]:
                pre: code.rainbowjs
                    | ./
                    | |__ a.ark
                    | |__ foo/
                    |     |__ b.ark
                    |     |__ bar/
                    |         |__ c.ark
                p To import #[code c.ark] from #[code a.ark] or #[code b.ark], you will need to write
                pre: code.rainbowjs(data-language="arkscript")
                    | (import foo.bar.c)
                p.
                    Then, it continues to resolve imports recursively, calling the parser on each new unimported package it finds.
                    The final AST is the agglomeration of all ASTs, where every #[code import] directive is replaced by a Namespace node, which
                    holds the file's AST, its name, path, and import attributes (is glob, symbols, prefix).
                
        section#macro-processor
            h2 Macro processor
            div.inner-section
                p.
                    Once the AST has been built, the macro processor kicks into action and goes over the AST, trying to find any macro
                    node to register them and apply them. Macros are registered by block, so if we are at a current depth of 0 in the
                    AST, and found a macro, it will available in every node. If we find a macro in a node at depth 2, the macro will
                    get registered in applied in all the potential sub-nodes of the current node, but once we leave the depth 2 node,
                    the macro will be removed from memory and won't be accessible in the other part of the script.
                p It is composed of different pieces:
                ul
                    li the processor, receiving the AST, keeping track of all the macros, and visiting every node, applying macros in them (it also does complex stuff with function macros like unifying the argument lists)
                    li the pipeline, holding all the different macro executors, trying to apply them one after another (until one matches) when the processor asks for a macro to be applied on a node
                    li the executors:
                        ul
                            li the conditional one works only with if macros and apply them regarding the value of the condition
                            li the symbol one applies the value held by the macro
                            li the list one applies predefined macros and user defined macros (function macros), it is arguably the most complex one but also the best one as well
                p.
                    Once it is done running, every macro definition and macro usage in the AST has been removed and/or replaced with the
                    corresponding value, so we are left with an AST that the compiler could already work with.

        section#name-resolver
            h2 Name Resolver
            div.inner-section
                p Once macros have been processed, the name resolver visits the AST and updates each symbol, to fully qualify it.
                p.
                    Fully qualifying a symbol means finding the nearest namespace in which a symbol is declared ; in our input AST we
                    have #[code (let foo 5)], in the final AST we will have #[code (let package:foo 5)] or even #[code #{'(let package:foo#hidden 5)'}]
                    in the case of symbols that should be available but masked as they weren't explicitly imported (eg. #[code (import foo :bar)],
                    all symbols from the package #[code foo] are imported and suffixed with #[code #{'#hidden'}], and #[code bar] is imported
                    as-is).
        
        section#ast-optimizer
            h2 AST Optimizer
            div.inner-section
                p.
                    Though before being able to compile the AST, we can optimize it a bit, by removing unused variable definition. For
                    simple variables, like #[code (let a 12)], this isn't really a problem if we leave them, but for functions it would create
                    separate pages of bytecode for them, and the resulting bytecode would be a lot longer than just a variable declaration
                    and assignment. Having a long bytecode isn't a problem in term of computing power, as we are only computing what we
                    are asked to, but we are limited to 65'534 functions as our code segment indexes are on 2 bytes, and we are limited
                    to 65'536 different symbols (and values). Those symbols and values could be used only in those functions we want
                    to delete, and use substantial space in the symbols and values table.
                p.
                    So here comes the AST optimizer, reading only the first level of the AST, searching for variables and functions definition.
                    Then, it visits the whole AST, counting how many times each gathered symbol has been used. In the end, if a symbol has
                    been used only once (it correspond to its definition/declaration), then it gets removed from the AST.
        
        section#compiler
            h2 Compiler
            div.inner-section
                p.
                    The compiler's role is to take a tree-like structure, the AST, and flatten it, so that the virtual machine can just read
                    one instruction after another, without having to dive in a nested structure (which is very inefficient).
                p.
                    It works recursively on the nodes, and sometimes even I have some trouble understanding why something works and why
                    something else doesn't. In the end, it all boils down to "the IR has been badly generated".
                p.
                    First step is to run through the AST, running each node in the #[code Compiler::compileExpression] recursive method, in charge of generating the IR.
                h3 The compilation
                p Given an input node, we make a decision based on its type (#[code Compiler::compileExpression]):
                ul
                    li if it's a symbol we will compile it to a #[code LOAD_SYMBOL &lt;symbol&gt;]
                    li "get field operation", #[code GET_FIELD &lt;symbol&gt;]
                    li String, Number or nil, we push the value on the stack with #[code LOAD_CONST &lt;const&gt;]
                        ul: li an additional step is done here to avoid pushing the value on the stack #[strong if] the value isn't being used (eg in a function call, variable assignment)
                    li Keywords:
                        ul
                            li If: first we compile the condition, then add a jump if true to go to the #[code ifTrue] branch. We compile the #[code ifFalse] branch, add a jump to the end of the if, and finally we compile the #[code ifTrue] branch.
                            li Let, Mut, Set: we register the symbol, compile the value, add the corresponding instruction after it: #[code LET], #[code MUT], #[code STORE]
                            li.
                                Fun: we start by checking if the function is a closure (has any Capture nodes) and emplace #[code CAPTURE] instructions in the callee page. Then we create a new page, dedicated to the
                                function. If it's a closure, we'll add a #[code MAKE_CLOSURE] instruction instead of a #[code LOAD_CONST] to the callee page. Arguments are loaded by the function with series of
                                #[code STORE] instructions, in the order the arguments appear. Then we compile the body of the function, marking it as used and terminal.
                            li Begin: we take each node and compile them. An additional step is done here, to remove any unused value, except for the last node whose fate is decided by the caller (so that we don't always drop the last node in a begin, which may be the return value of a function).
                            li While: much like the if, we compile the condition, add a jump to the end of the while if the condition is false, compile the body and add a jump to the beginning (right before the condition).
                            li Import: this is used only to import modules at runtime, we put the module name (a string) on the stack and then the #[code IMPORT] instruction. The VM will do what's needed for us.
                            li Del: this adds #[code DEL &lt;symbol&gt;] to the bytecode, to tell the virtual machine to remove #[code &lt;symbol&gt;] from memory.
                    li if none the previous cases matched, then we most likely have a function call (#[code Compiler::handleCalls])
                        ul
                            li.
                                we first check if the function call is a short-circuiting operator, #[code and] or #[code or]. If it is, we duplicate the first value,
                                and add a #[code POP_JUMP_IF_FALSE] for #[code and], otherwise a #[code POP_JUMP_IF_TRUE] for #[code or], then a #[code POP] to remove the
                                leftover value in case we didn't jump. The next value is added, and it's not the last one, we #[code DUP] it as well.
                            li
                                | otherwise, if the function call isn't an operator, we check if the call is terminal and self-call (calling the function we are currently
                                | compiling). If it is, we replace the call by a jump to address 0 (relative to the current page), transforming the tail call into a loop.
                                | If it isn't, we compile the function call to a temporary page.
                                ul
                                    li then we compile the arguments on the current page, marking them as "no discard"
                                    li we push the computed expression for the function call and discard the temporary page
                                    li we add the #[code CALL] instruction, the number of arguments
                            li.
                                finally, if we're here we have an operator call. We start by pushing arguments to the stack, check argument count for error reporting, and then add the
                                operator.

        section#ir-optimizer
            h2 IR Optimizer
            div.inner-section
                p.
                    The IR Optimizer is given the IR blocks generated by the Compiler, as well as the symbol and value tables. From there, it visits each page and see if it can merge 2 or 3
                    instructions together.
                p.
                    First, it tries to merge 2 instructions. Then, if no instruction were merged, it tries with 3. Finally, if no instructions were merged, it leaves the instruction untouched.
                    Otherwise, the group of instructions is skipped over and the new instruction is kept in the final IR.
                    The value table is particularly useful when compacting code like #[code (+ i 2)] to check if the value used for incrementing (or decrementing) is between 0 and 4095
                    (the maximum value we can encode on 12 bits in super instructions).

        section#ir-compiler
            h2 IR Compiler
            div.inner-section
                p.
                    The IR Compiler takes optimized blocks of IR, with the symbol and value tables, and transform it into bytecode for the virtual machine. Its role
                    is also to compute the jumps' positions from the labels in the IR blocks.
                ul
                    li.
                        The first step is to generate the file header: the string #[code ark\0], followed by the version of the compiler (each number on two bytes),
                        and then the timestamp (#[code IRCompiler::pushFileHeader]).
                    li.
                        We can continue to build our bytecode file header, with the symbols and the values table, respectively for a list of identifier used throughout
                        the program, and for all the values used (a tag-value system is used here so that the VM knows what type the value is) (#[code IRCompiler::pushSymAndValTables]).
                    li.
                        Finally, we add the different code pages to the bytecode file, generated by the #[code IRCompiler::compile] method call, and create the SHA256 used for
                        integrity checking of the bytecode, in a spot in the file header.

        section#json-compiler
            h2 JSON Compiler
            div.inner-section
                p Given an input node, we generate the corresponding JSON structure:
                ul
                    li Symbol: #[code {"type": "Symbol", "name": "..."}]
                    li Spread: #[code {"type": "Spread", "name": "..."}]
                    li Capture: #[code {"type": "Capture", "name": "..."}]
                    li Field: #[code #{'{"type": "Field", "children": [{"type": "Symbol", "name": "..."}, ...]}'}]
                    li String: #[code {"type": "String", "value": "..."}]
                    li Number: #[code {"type": "Number", "value": ...}]
                    li
                        | Function call:&nbsp;
                        code {"type": "FunctionCall", "name": "...", "args": [{"type": "Symbol", "name": "..."} ...]}
                    li Keywords:
                        ul
                            li
                                | Function declaration:&nbsp;
                                code {"type": "Fun", "args": [{"type": "Symbol", "name": "..."} ...], "body": [...] | {...}}
                            li Variable declaration/modification: #[code {"type": "Let|Mut|Set", "name": {"type": "Symbol", "name": "..."}, "value": {...}}]
                            li
                                | Condition:&nbsp;
                                code {"type": "If", "condition": [...], "then": [...] | {}, "else": [...] | {}}]
                            li
                                | While loop:&nbsp;
                                code {"type": "While", "condition": [...], "body": [...] | {}}]
                            li
                                | Begin:&nbsp;
                                code {"type": "Begin", "children": [...]}]
                            li Import: #[code #{'{"type": "Import", "package": "foo.bar.egg", "glob": false, "symbols": ["a", "b", "c"]}'}]
                            li Del: #[code {"type": "Del", "value": {"type": "Symbol", "name": "..."}}]
                    li Macros:
                        ul
                            li
                                | Macro value:&nbsp;
                                code {"type": "Macro", "name": "...", "value": {...}}
                            li
                                | Macro function:&nbsp;
                                code {"type": "Macro", "name": "...", "args": [...], "body": {...}}
                            li
                                | Macro condition:&nbsp;
                                code {"type": "MacroCondition", "condition": {...}, "then": {...}, "else": {...}}
                p.
                    Some fields have been filled to give you an idea of what the #[code value] should look like in most cases. One
                    should note that function arguments can have #[code Capture] nodes as well as #[code Symbol] nodes.
                p Generic structure:
                pre: code.rainbowjs
                    | {
                    |     "type": "&lt;name&gt;",
                    |     "value": ... || "..." || {...},  // optional
                    |     "name": "...",  // optional
                    |     "args": [{...}, ...],  // optional
                    |     "condition": [{...}, ...] || {...},  // optional
                    |     "then": [{...}, ...] || {...},  // optional
                    |     "else": [{...}, ...] || {...},  // optional
                    |     "body": [{...}, ...] || {...},  // optional
                    |     "children": [{...}, ...]  // optional
                    | }
