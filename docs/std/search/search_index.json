{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ArkScript Events Exceptions Functional List Mathematics Range String Switch Os","title":"Home"},{"location":"#arkscript","text":"","title":"ArkScript"},{"location":"#events","text":"","title":"Events"},{"location":"#exceptions","text":"","title":"Exceptions"},{"location":"#functional","text":"","title":"Functional"},{"location":"#list","text":"","title":"List"},{"location":"#mathematics","text":"","title":"Mathematics"},{"location":"#range","text":"","title":"Range"},{"location":"#string","text":"","title":"String"},{"location":"#switch","text":"","title":"Switch"},{"location":"#os","text":"","title":"Os"},{"location":"Events/","text":"Events (events:manager:make) Allows to register events listeners and emit events (let em (events:manager:make)) (em.on \"myType\" (fun (value) (print \"This is a callback\"))) (em.emit \"myType\") # => prints \"This is a callback\" thanks to the registered listener Author : fabien-zoccola (_check_valid callback) Checks if a given callback is valid (is a function or a closure) callback the callback to check Returns true if the callback is a function/closure, false otherwise # (closure._check_valid (fun (param) ())) # => true # (closure._check_valid (fun (param) {})) # => true # (closure._check_valid 5) # => false Author : fabien-zoccola (on typ callback) Registers an event listener typ the type of the event to listen for callback the function/closure that will be called when an event is emitted Adds a [type callback] list to the listeners list # (closure.on \"myType\" (fun (param) ()) Author : fabien-zoccola (emitWith val typ) Emits an event with a value val the emitted value typ the type of the emitted event Makes a forEach on the listeners list, and calls the callback. Returns a boolean of whether we called at least one listener # (closure.emitWith 5 \"myType\") Author : fabien-zoccola (emit typ) Emits an event with no value typ the type of the emitted event Calls emitWith nil # (closure.emit \"myType\") Author : fabien-zoccola (removeListenersOfType typ) Removes all listeners of a given type typ the type of event to remove from the list Returns if at least one listener has been removed # (closure.remove_listeners_of_type \"myType\") Author : fabien-zoccola","title":"Events"},{"location":"Events/#events","text":"","title":"Events"},{"location":"Events/#eventsmanagermake","text":"Allows to register events listeners and emit events (let em (events:manager:make)) (em.on \"myType\" (fun (value) (print \"This is a callback\"))) (em.emit \"myType\") # => prints \"This is a callback\" thanks to the registered listener Author : fabien-zoccola","title":"(events:manager:make)"},{"location":"Events/#_check_valid-callback","text":"Checks if a given callback is valid (is a function or a closure) callback the callback to check Returns true if the callback is a function/closure, false otherwise # (closure._check_valid (fun (param) ())) # => true # (closure._check_valid (fun (param) {})) # => true # (closure._check_valid 5) # => false Author : fabien-zoccola","title":"(_check_valid  callback)"},{"location":"Events/#on-typ-callback","text":"Registers an event listener typ the type of the event to listen for callback the function/closure that will be called when an event is emitted Adds a [type callback] list to the listeners list # (closure.on \"myType\" (fun (param) ()) Author : fabien-zoccola","title":"(on  typ callback)"},{"location":"Events/#emitwith-val-typ","text":"Emits an event with a value val the emitted value typ the type of the emitted event Makes a forEach on the listeners list, and calls the callback. Returns a boolean of whether we called at least one listener # (closure.emitWith 5 \"myType\") Author : fabien-zoccola","title":"(emitWith  val typ)"},{"location":"Events/#emit-typ","text":"Emits an event with no value typ the type of the emitted event Calls emitWith nil # (closure.emit \"myType\") Author : fabien-zoccola","title":"(emit  typ)"},{"location":"Events/#removelistenersoftype-typ","text":"Removes all listeners of a given type typ the type of event to remove from the list Returns if at least one listener has been removed # (closure.remove_listeners_of_type \"myType\") Author : fabien-zoccola","title":"(removeListenersOfType  typ)"},{"location":"Exceptions/","text":"Exceptions (throw _x) throw takes a value as its argument and return it to be used by try _x the value to return (let error (throw \"cannot divide by zero\")) Author : SuperFola (return _y) return takes a value as its argument and return it to be used by try _x the value to return (let value (return (/ 1 x))) Author : SuperFola (try _either _continue _handle) Takes a value either returned by throw or return and apply a given on it if it's an error or not _either the value to test _continue the success handler _handle the error handler (let invert (fun (x) (if (= x 0) (throw \"cannot divide by zero\") (return (/ 1 x))))) (try (invert 0) (fun (inverted) (print inverted)) (fun (err) (print err))) Author : SuperFola","title":"Exceptions"},{"location":"Exceptions/#exceptions","text":"","title":"Exceptions"},{"location":"Exceptions/#throw-_x","text":"throw takes a value as its argument and return it to be used by try _x the value to return (let error (throw \"cannot divide by zero\")) Author : SuperFola","title":"(throw  _x)"},{"location":"Exceptions/#return-_y","text":"return takes a value as its argument and return it to be used by try _x the value to return (let value (return (/ 1 x))) Author : SuperFola","title":"(return  _y)"},{"location":"Exceptions/#try-_either-_continue-_handle","text":"Takes a value either returned by throw or return and apply a given on it if it's an error or not _either the value to test _continue the success handler _handle the error handler (let invert (fun (x) (if (= x 0) (throw \"cannot divide by zero\") (return (/ 1 x))))) (try (invert 0) (fun (inverted) (print inverted)) (fun (err) (print err))) Author : SuperFola","title":"(try  _either _continue _handle)"},{"location":"Functional/","text":"Functional (compose _f _g) Compose function calls _f the first function _g the second function (let foo (fun (a) (* a a))) (let bar (fun (b) (+ b b))) (let composed (compose foo bar)) (print (composed 12)) # return value is (12 + 12) * (12 + 12) Author : rstefanic (left _x) Take a value as its argument and return a function taking 2 arguments which will call the first function on the value _x the value (let val (left 12)) (val (fun (x) (print x \" i am called\")) (fun (x) (print x \" i am NOT called\"))) Author : SuperFola (right _y) Take a value as its argument and return a function taking 2 arguments which will call the second function on the value _y the value (let val (right 12)) (val (fun (x) (print x \" i am NOT called\")) (fun (x) (print x \" i am called\"))) Author : SuperFola (flip _f _a) Flip the arguments of a function _f the function _a the first argument Returns a function taking 1 argument: the second argument of the function to flip (let foo (fun (a b) (- a b))) ((flip foo 14) 12) # will call (foo 12 14) instead of (foo 14 12) Author : rstefanic","title":"Functional"},{"location":"Functional/#functional","text":"","title":"Functional"},{"location":"Functional/#compose-_f-_g","text":"Compose function calls _f the first function _g the second function (let foo (fun (a) (* a a))) (let bar (fun (b) (+ b b))) (let composed (compose foo bar)) (print (composed 12)) # return value is (12 + 12) * (12 + 12) Author : rstefanic","title":"(compose  _f _g)"},{"location":"Functional/#left-_x","text":"Take a value as its argument and return a function taking 2 arguments which will call the first function on the value _x the value (let val (left 12)) (val (fun (x) (print x \" i am called\")) (fun (x) (print x \" i am NOT called\"))) Author : SuperFola","title":"(left  _x)"},{"location":"Functional/#right-_y","text":"Take a value as its argument and return a function taking 2 arguments which will call the second function on the value _y the value (let val (right 12)) (val (fun (x) (print x \" i am NOT called\")) (fun (x) (print x \" i am called\"))) Author : SuperFola","title":"(right  _y)"},{"location":"Functional/#flip-_f-_a","text":"Flip the arguments of a function _f the function _a the first argument Returns a function taking 1 argument: the second argument of the function to flip (let foo (fun (a b) (- a b))) ((flip foo 14) 12) # will call (foo 12 14) instead of (foo 14 12) Author : rstefanic","title":"(flip  _f _a)"},{"location":"List/","text":"List (list:take _L _n) Take the first n elements of _L the list to work on _n the number of elements to take The original list is left unmodified. (print (list:take [1 2 3 4 5 6 7 8 9] 4)) # [1 2 3 4] Author : rstefanic (list:unzip _L) Unzip a list of [[a b] [c d]...] into [[a c ...] [b d ...]] _L the list to work on The original list is left unmodified. (let zipped [[1 5] [2 6] [3 7] [4 8]]) (print (list:unzip zipped)) # [[1 2 3 4] [5 6 7 8]] Author : FrenchMasterSword (list:zip _a _b) Zip two lists into one: [1 2 3 4] and [5 6 7 8] will give [[1 5] [2 6] [3 7] [4 8]] _a the first list to work on _b the second list to work on The original lists are left unmodified. (let a [1 2 3 4]) (let b [5 6 7 8]) (print (list:zip a b)) # [[1 5] [2 6] [3 7] [4 8]] Author : FrenchMasterSword (list:foldLeft _L _init _f) Fold a given list, starting from the left side _L the list to work on _init an init value _f a function to apply to the list The original list is left unmodified. (let a [1 2 3 4]) (print (list:foldLeft a 0 (fun (a b) (+ a b)))) # 10 Author : SuperFola (list:forAll a f) Check if a condition is verified for all elements of a list a the list to work on f the conditon (let a [1 2 3 4]) (let f (fun(e)(< e 5))) (print (list:forAll a f)) # true Author : Gryfenfer97 (list:any a f) Check if a condition if verified for one or more elements of a list a the list to work on f the conditon (let a [1 2 3 4]) (let f (fun(e)(< e 3))) (print (list:any a f)) # true Author : Gryfenfer97","title":"List"},{"location":"List/#list","text":"","title":"List"},{"location":"List/#listtake-_l-_n","text":"Take the first n elements of _L the list to work on _n the number of elements to take The original list is left unmodified. (print (list:take [1 2 3 4 5 6 7 8 9] 4)) # [1 2 3 4] Author : rstefanic","title":"(list:take  _L _n)"},{"location":"List/#listunzip-_l","text":"Unzip a list of [[a b] [c d]...] into [[a c ...] [b d ...]] _L the list to work on The original list is left unmodified. (let zipped [[1 5] [2 6] [3 7] [4 8]]) (print (list:unzip zipped)) # [[1 2 3 4] [5 6 7 8]] Author : FrenchMasterSword","title":"(list:unzip  _L)"},{"location":"List/#listzip-_a-_b","text":"Zip two lists into one: [1 2 3 4] and [5 6 7 8] will give [[1 5] [2 6] [3 7] [4 8]] _a the first list to work on _b the second list to work on The original lists are left unmodified. (let a [1 2 3 4]) (let b [5 6 7 8]) (print (list:zip a b)) # [[1 5] [2 6] [3 7] [4 8]] Author : FrenchMasterSword","title":"(list:zip  _a _b)"},{"location":"List/#listfoldleft-_l-_init-_f","text":"Fold a given list, starting from the left side _L the list to work on _init an init value _f a function to apply to the list The original list is left unmodified. (let a [1 2 3 4]) (print (list:foldLeft a 0 (fun (a b) (+ a b)))) # 10 Author : SuperFola","title":"(list:foldLeft  _L _init _f)"},{"location":"List/#listforall-a-f","text":"Check if a condition is verified for all elements of a list a the list to work on f the conditon (let a [1 2 3 4]) (let f (fun(e)(< e 5))) (print (list:forAll a f)) # true Author : Gryfenfer97","title":"(list:forAll  a f)"},{"location":"List/#listany-a-f","text":"Check if a condition if verified for one or more elements of a list a the list to work on f the conditon (let a [1 2 3 4]) (let f (fun(e)(< e 3))) (print (list:any a f)) # true Author : Gryfenfer97","title":"(list:any  a f)"},{"location":"Mathematics/","text":"Mathematics (math:abs _x) Return the absolute value of a number _x the number to get the absolute value of Author : rstefanic (math:even _n) Return true if the number is even, false otherwise _n the number Author : rstefanic (math:odd _n) Return true if the number is odd, false otherwise _n the number Author : rstefanic (math:min _a _b) Get the minimum between two numbers _a the first number _b the second number Author : rstefanic (math:max _a _b) Get the maximum between two numbers _a the first number _b the second number Author : rstefanic (math:pow _x _a) Get a number to a given power Note that it's defined as exp(a * ln(x)), thus won't work for negative numbers _x the number to pow _a the exponent Author : SuperFola (math:sqrt _x) Get the square root of a number Square roots can't be taken for negative numbers for obvious reasons. _x the number Author : SuperFola (math:fibo n p c) Run the fibonacci function on a number n the number p an accumulator c an accumulator Author : SuperFola (math:fibo 45 0 1) (math:divs n) Returns the list of a number's divisors n the number Author : Wafelack (math:divs 6) # Returns [1 2 3 6] (math:log x n) Returns the logarithm base n of a number x the number n the base Author : Gryfenfer97 (math:log 81 3) # Returns 4 (math:log2 x) Returns the logarithm base 2 of a number x the number Author : Gryfenfer97 (math:log2 128) # Returns 7 (math:log10 x) Returns the logarithm base 10 of a number x the number Author : Gryfenfer97 (math:log10 1000) # Returns 3 (math:floordiv a b) Returns the quotient of the euclidian division of a and b a the dividend b the divisor Author : fabien-zoccola (math:floordiv 14 6) # Returns 2","title":"Mathematics"},{"location":"Mathematics/#mathematics","text":"","title":"Mathematics"},{"location":"Mathematics/#mathabs-_x","text":"Return the absolute value of a number _x the number to get the absolute value of Author : rstefanic","title":"(math:abs  _x)"},{"location":"Mathematics/#matheven-_n","text":"Return true if the number is even, false otherwise _n the number Author : rstefanic","title":"(math:even  _n)"},{"location":"Mathematics/#mathodd-_n","text":"Return true if the number is odd, false otherwise _n the number Author : rstefanic","title":"(math:odd  _n)"},{"location":"Mathematics/#mathmin-_a-_b","text":"Get the minimum between two numbers _a the first number _b the second number Author : rstefanic","title":"(math:min  _a _b)"},{"location":"Mathematics/#mathmax-_a-_b","text":"Get the maximum between two numbers _a the first number _b the second number Author : rstefanic","title":"(math:max  _a _b)"},{"location":"Mathematics/#mathpow-_x-_a","text":"Get a number to a given power Note that it's defined as exp(a * ln(x)), thus won't work for negative numbers _x the number to pow _a the exponent Author : SuperFola","title":"(math:pow  _x _a)"},{"location":"Mathematics/#mathsqrt-_x","text":"Get the square root of a number Square roots can't be taken for negative numbers for obvious reasons. _x the number Author : SuperFola","title":"(math:sqrt  _x)"},{"location":"Mathematics/#mathfibo-n-p-c","text":"Run the fibonacci function on a number n the number p an accumulator c an accumulator Author : SuperFola (math:fibo 45 0 1)","title":"(math:fibo  n p c)"},{"location":"Mathematics/#mathdivs-n","text":"Returns the list of a number's divisors n the number Author : Wafelack (math:divs 6) # Returns [1 2 3 6]","title":"(math:divs  n)"},{"location":"Mathematics/#mathlog-x-n","text":"Returns the logarithm base n of a number x the number n the base Author : Gryfenfer97 (math:log 81 3) # Returns 4","title":"(math:log  x n)"},{"location":"Mathematics/#mathlog2-x","text":"Returns the logarithm base 2 of a number x the number Author : Gryfenfer97 (math:log2 128) # Returns 7","title":"(math:log2  x)"},{"location":"Mathematics/#mathlog10-x","text":"Returns the logarithm base 10 of a number x the number Author : Gryfenfer97 (math:log10 1000) # Returns 3","title":"(math:log10  x)"},{"location":"Mathematics/#mathfloordiv-a-b","text":"Returns the quotient of the euclidian division of a and b a the dividend b the divisor Author : fabien-zoccola (math:floordiv 14 6) # Returns 2","title":"(math:floordiv  a b)"},{"location":"Range/","text":"Range (range i _b) Create a ranged closure in interval [a, b[ i the beginning of the range _b the end of the range Has a field asList to compute a list from the current state of the range, and another one reset . (let obj (range 1 10)) (print (obj.asList)) # [1 2 3 4 5 6 7 8 9] (while (not (nil? (obj))) (print obj.i)) # print the current element (print (obj.asList)) # [], the range has been used (obj.reset) # the range is ready to be used again (print (obj.asList)) # [1 2 3 4 5 6 7 8 9] Author : SuperFola (range:forEach _r _f) Run a function on each element of the range _r the range object _f the function The range is unmodified. (let obj (range 1 10)) (range:forEach obj (fun (e) (print e))) Author : SuperFola (range:filter range ) Create a list based on a range and a filter function _range the range object _fun the filter function The range is unmodified. (let obj (range 1 10)) (print (range:filter obj math:even)) # [2 4 6 8] Author : SuperFola (range:map range ) Create a list based on a range and a function to apply to each elements _range the range object _fun the function to apply The range is unmodified. (let obj (range 1 10)) (print (range:map obj (fun (e) (* e e)))) # [1 4 9 16 25 36 49 64 81] Author : SuperFola (range:reduce range ) Create a reduced list based on a range and a reduction function _range the range object _fun the reduction function The range is unmodified. (let obj (range 1 10)) (print (range:reduce obj (fun (e) (+ e e)))) # 45 Author : SuperFola","title":"Range"},{"location":"Range/#range","text":"","title":"Range"},{"location":"Range/#range-i-_b","text":"Create a ranged closure in interval [a, b[ i the beginning of the range _b the end of the range Has a field asList to compute a list from the current state of the range, and another one reset . (let obj (range 1 10)) (print (obj.asList)) # [1 2 3 4 5 6 7 8 9] (while (not (nil? (obj))) (print obj.i)) # print the current element (print (obj.asList)) # [], the range has been used (obj.reset) # the range is ready to be used again (print (obj.asList)) # [1 2 3 4 5 6 7 8 9] Author : SuperFola","title":"(range  i _b)"},{"location":"Range/#rangeforeach-_r-_f","text":"Run a function on each element of the range _r the range object _f the function The range is unmodified. (let obj (range 1 10)) (range:forEach obj (fun (e) (print e))) Author : SuperFola","title":"(range:forEach  _r _f)"},{"location":"Range/#rangefilter-range","text":"Create a list based on a range and a filter function _range the range object _fun the filter function The range is unmodified. (let obj (range 1 10)) (print (range:filter obj math:even)) # [2 4 6 8] Author : SuperFola","title":"(range:filter  range )"},{"location":"Range/#rangemap-range","text":"Create a list based on a range and a function to apply to each elements _range the range object _fun the function to apply The range is unmodified. (let obj (range 1 10)) (print (range:map obj (fun (e) (* e e)))) # [1 4 9 16 25 36 49 64 81] Author : SuperFola","title":"(range:map  range )"},{"location":"Range/#rangereduce-range","text":"Create a reduced list based on a range and a reduction function _range the range object _fun the reduction function The range is unmodified. (let obj (range 1 10)) (print (range:reduce obj (fun (e) (+ e e)))) # 45 Author : SuperFola","title":"(range:reduce  range )"},{"location":"String/","text":"String (str:toLower text) Converts the given character to lowercase. _string the string to make lowercase The original string is left unmodified. (import \"String.ark\") (let message \"HeLLo World, I like cheese\") (let new (str:toLower message)) # => hello world, i like cheese Author : SuperFola (str:toUpper _string) Converts the given character to uppercase. _string the string to make uppercase The original string is left unmodified. (import \"String.ark\") (let message \"hello world, I like cheese\") (let new (str:toUpper message)) # => HELLO WORLD, I LIKE CHEESE Author : SuperFola (str:reverse _string) Reverse a string. _string the string to reverse The original string is left unmodified. (import \"String.ark\") (let message \"hello world, I like goats\") (let reversed (str:reverse message)) # => staog ekil I ,dlrow olleh Author : Natendrtfm (str:slice _string _startingIndex _length) Get a slice of a given string, from a given index with a given length _string the string to get a slice of _startingIndex the index in the string where to start slicing _length the length of the slice The original string is left unmodified. Example: (import \"String.ark\") (let message \"hello world, I like goats\") (let slice (str:slice message 6 4)) # => worl Author : Natendrtfm (str:split _string _separator) Split a string in multiple substrings in a list, given a separator _string the string to split _separator the separator to use for splitting Returns a list of strings. Example : (import \"String.ark\") (let message \"hello world, I like boats\") (let splitted (str:split message \" \")) Author : Natendrtfm (str:replace _string _pattern _new) Replace a substring in a given string _string base string who contain pattern to replace by new sub string given _pattern sub string pattern to replace _new string who must replace the pattern The original string isn't modified. (import \"String.ark\") (let message \"hello XXX, do you like the name XXX?\") (print (str:replace message \"XXX\" \"Harry\")) # hello Harry, do you like the name Harry? (str:join _list _delim) Join a list of elements with a given string delimiter _list host the elements to join _delim a string delimiter to be put between each element The original list isn't modified (import \"String.ark\") (let data [1 \"hello\" 3.14 true \"world\"]) (print (str:join data \";\")) # 1;hello;3.14;true;world","title":"String"},{"location":"String/#string","text":"","title":"String"},{"location":"String/#strtolower-text","text":"Converts the given character to lowercase. _string the string to make lowercase The original string is left unmodified. (import \"String.ark\") (let message \"HeLLo World, I like cheese\") (let new (str:toLower message)) # => hello world, i like cheese Author : SuperFola","title":"(str:toLower  text)"},{"location":"String/#strtoupper-_string","text":"Converts the given character to uppercase. _string the string to make uppercase The original string is left unmodified. (import \"String.ark\") (let message \"hello world, I like cheese\") (let new (str:toUpper message)) # => HELLO WORLD, I LIKE CHEESE Author : SuperFola","title":"(str:toUpper  _string)"},{"location":"String/#strreverse-_string","text":"Reverse a string. _string the string to reverse The original string is left unmodified. (import \"String.ark\") (let message \"hello world, I like goats\") (let reversed (str:reverse message)) # => staog ekil I ,dlrow olleh Author : Natendrtfm","title":"(str:reverse  _string)"},{"location":"String/#strslice-_string-_startingindex-_length","text":"Get a slice of a given string, from a given index with a given length _string the string to get a slice of _startingIndex the index in the string where to start slicing _length the length of the slice The original string is left unmodified. Example: (import \"String.ark\") (let message \"hello world, I like goats\") (let slice (str:slice message 6 4)) # => worl Author : Natendrtfm","title":"(str:slice  _string _startingIndex _length)"},{"location":"String/#strsplit-_string-_separator","text":"Split a string in multiple substrings in a list, given a separator _string the string to split _separator the separator to use for splitting Returns a list of strings. Example : (import \"String.ark\") (let message \"hello world, I like boats\") (let splitted (str:split message \" \")) Author : Natendrtfm","title":"(str:split  _string _separator)"},{"location":"String/#strreplace-_string-_pattern-_new","text":"Replace a substring in a given string _string base string who contain pattern to replace by new sub string given _pattern sub string pattern to replace _new string who must replace the pattern The original string isn't modified. (import \"String.ark\") (let message \"hello XXX, do you like the name XXX?\") (print (str:replace message \"XXX\" \"Harry\")) # hello Harry, do you like the name Harry?","title":"(str:replace  _string _pattern _new)"},{"location":"String/#strjoin-_list-_delim","text":"Join a list of elements with a given string delimiter _list host the elements to join _delim a string delimiter to be put between each element The original list isn't modified (import \"String.ark\") (let data [1 \"hello\" 3.14 true \"world\"]) (print (str:join data \";\")) # 1;hello;3.14;true;world","title":"(str:join  _list _delim)"},{"location":"Switch/","text":"Switch (switch _value _tests) Takes a value to match against a list of [possible values, function to run if it matched] _value value to match _test list for test value, composed by sub lists who contained possible value and function to run if matched Once the value is matched, it stops and doesn't try any other values. (switch 12 [ [1 (fun () (print \"the value is one\"))] [12 '(print \"quoted code blocks also works\")] [12 '{ (let b \"ok\") (print b \", quoted begin blocks work as well\") }] ]) Author : SuperFola","title":"Switch"},{"location":"Switch/#switch","text":"","title":"Switch"},{"location":"Switch/#switch-_value-_tests","text":"Takes a value to match against a list of [possible values, function to run if it matched] _value value to match _test list for test value, composed by sub lists who contained possible value and function to run if matched Once the value is matched, it stops and doesn't try any other values. (switch 12 [ [1 (fun () (print \"the value is one\"))] [12 '(print \"quoted code blocks also works\")] [12 '{ (let b \"ok\") (print b \", quoted begin blocks work as well\") }] ]) Author : SuperFola","title":"(switch  _value _tests)"},{"location":"os/","text":"os (os:home_dir) Returns the home dir of the current user Author : Wafelack, https://github.com/SuperFola","title":"Os"},{"location":"os/#os","text":"","title":"os"},{"location":"os/#oshome_dir","text":"Returns the home dir of the current user Author : Wafelack, https://github.com/SuperFola","title":"(os:home_dir)"}]}